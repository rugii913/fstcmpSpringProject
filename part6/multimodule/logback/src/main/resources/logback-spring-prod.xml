<included>
    <!--<variable file="logback/src/main/resources/logback-variables.properties" />--> <!-- 프로젝트 루트부터의 경로 -->
    <!-- You may also reference a resource on the class path instead of a file. -->
    <variable resource="logback-variables.properties" /> <!-- 현재 파일 경로 -->
    <!--  For historical reasons, the XML element for defining variables is <property> although in logback 1.0.7 and later the element <variable> can be used interchangeably. -->
    <!--<property resource="logback-variables.properties"/>-->
    <!-- logback-variables.properties에도 붙인 참고 링크 https://logback.qos.ch/manual/configuration.html#variableSubstitution -->

    <!-- 운영 환경에서는 console appender가 의미가 없다. class를 ConsoleAppender에서 RollingFileAppender로 바꿔준다. -->
    <appender name="REQUEST1" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_DIR}/request1.log</file> <!-- (서버 돌면서 기록되고 있는 파일) 파일 단위로 관리하기 시작했으므로 파일 경로와 이름 지정 --> <!-- FileAppender setFile(~) -->

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"> <!-- RollingPolicy도 interface, 그 클래스를 지정해줄 수 있다. -->
            <fileNamePattern>logs/archive/request1.%d{yyyy-MM-dd}_%i.log</fileNamePattern> <!-- (다 기록된 파일) 일정 크기 이상 됐을 때 archive 디렉토리로 들어가는 이름 패턴 %i는 0, 1, 2, ... 순서 -->
            <maxFileSize>1KB</maxFileSize> <!-- 로그 파일 최대 크기 - 1KB 단위로 파일 생성 -->
            <maxHistory>30</maxHistory> <!-- 로그 파일 최대 보관 기간(단위: 일) -->
        </rollingPolicy>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>
                [REQUEST1] ${LOG_PATTERN}
            </pattern>
            <outputPatternAsHeader>true</outputPatternAsHeader> <!-- 각 파일 헤더에 어떤 패턴으로 출력하고 있는지 표시함 -->
        </encoder>
    </appender>

    <appender name="REQUEST2" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_DIR}/request2.log</file>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>logs/archive/request2.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <maxFileSize>10KB</maxFileSize>
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>
                [REQUEST2] ${LOG_PATTERN}
            </pattern>
            <outputPatternAsHeader>true</outputPatternAsHeader>
        </encoder>
    </appender>

    <appender name="MDC" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_DIR}/mdc.log</file>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>logs/archive/mdc.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <maxFileSize>10KB</maxFileSize>
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>
                [MDC] %X{job}%n <!-- %X를 사용하면 MDC 안의 값을 키로 조회할 수 있다. %n은 개행문자 -->
            </pattern>
            <outputPatternAsHeader>true</outputPatternAsHeader>
        </encoder>
    </appender>

    <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_DIR}/warn.log</file>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
            <onMatch>ACCEPT</onMatch> <!-- 일치하면 남기고 -->
            <onMismatch>DENY</onMismatch> <!-- 확실하게 일치하지 않으면 남기지 않는다 -->
        </filter>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>logs/archive/warn.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <maxFileSize>10KB</maxFileSize>
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>
                [WARN] ${LOG_PATTERN}
            </pattern>
            <outputPatternAsHeader>true</outputPatternAsHeader>
        </encoder>
    </appender>

    <appender name="QUERY" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_DIR}/query.log</file>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>logs/archive/query.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <maxFileSize>10KB</maxFileSize>
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>
                [QUERY] ${LOG_PATTERN}
            </pattern>
            <outputPatternAsHeader>true</outputPatternAsHeader>
        </encoder>
    </appender>
    
    <!--
    cf. Level은 클래스이고, <level> 안의 값은 단순 문자열인데, 어떻게 상응하는 Level 인스턴스로 바꿔주는가?
        - XML 파일을 처리(process, unmarshall?, deserialize?라고 표현)할 때,
          이를 처리해 주는 JoranConfigurator에서 doConfigure할 때 interpreter에서 사용할 rule을 추가(addInstanceRules(RuleStore rs))
          이 rule에 level과 관련된 rule이 들어있음 - 이 rule로 인해 LevelAction과 연결
          LevelAction은 <level> element의 value(요소 꺾인 괄호 사이에 껴들어가 있는 값)을 가져와서
          Level의 static Level toLevel(String sArg, Level defaultLevel) 메서드 호출
    cf. LevelAction에 java doc으로 "This action is deprecated. Use the level attribute within the logger element."라고 쓰여져 있다.
        <level> element를 사용하기보다는 Logger의 attribute를 사용하는 것을 권장하는 듯하다.
        - Logger의 attribute를 Level 클래스로 바꾸는 것 역시 비슷함.
          LoggerAction의 public void begin(InterpretationContext ec, String name, Attributes attributes) 메서드 중
          String levelStr = ec.subst(attributes.getValue(LEVEL_ATTRIBUTE));으로 레벨을 나타내는 문자열을 불러온 후
          Level level = Level.toLevel(levelStr);로 Level 클래스 가져오는 부분이 있음
     -->

    <root level="INFO"> <!-- 운영에서는 DEBUG보다는 높은 레벨로 -->
        <!--<appender-ref ref="REQUEST1"/>-->
        <!--<appender-ref ref="REQUEST2"/>-->
        <!--<appender-ref ref="MDC"/>-->
        <!--<appender-ref ref="WARN"/>-->
    </root>

    <logger name="SQL_LOG1" level="INFO" additivity="false"> <!--additivity: 상위 로거 속성 상속 여부 옵션, false로 하면 완전히 상위 로거와 상관 없는 고립된 로거 설정을 하게 됨-->
        <appender-ref ref="QUERY"/>
    </logger>

    <logger name="SQL_LOG2" level="INFO" additivity="false">
        <appender-ref ref="QUERY"/>
    </logger>
    <!-- 같은 appender를 사용하므로, 같은 파일에 저장되지만, logback-variables.properties에서 가져오고 있는 LOG_PATTERN에서
         로거의 이름을 명시하고 있으므로, 위의 두 SQL_LOG1 로거에서 찍히는 로그와 SQL_LOG2 로거에서 찍히는 로그를 구분할 수 있음-->
</included>
